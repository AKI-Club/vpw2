VPW2 Decomp Directory Structure
===============================
This document describes the directory structure as it currently exists.

asm/
Holds various assembly files.

- asm/code_003/
Split out code for segment 3 (gameplay).

- asm/code_main/
Split out code for main segment.

- asm/data_000/
Split out data for segment 0 (menu 1).

- asm/data_001/
Split out data for segment 1 (cutscene).

- asm/data_003/
Split out data for segment 3 (gameplay).

--------------------------------------------------------------------------------
assets/
This directory is meant to hold human-editable assets (e.g. graphics, text,
models, sounds) that are converted as a part of the build process.

However, that's not implemented yet.

--------------------------------------------------------------------------------
bin/
Directory generated by extract_baserom.sh to store various binary files.

- bin/soundtable/
Soundtable and other sound-related binaries.

--------------------------------------------------------------------------------
build/
Directory generated as a part of the build process. Holds various output files.

--------------------------------------------------------------------------------
docs/
This project is poorly documented! Also, all of the extant knowledge about this
game primarily lies on random forums and some guy's archive that's still around
after all this time.

--------------------------------------------------------------------------------
include/
.h files, of course

--------------------------------------------------------------------------------
src/
This directory doesn't have much use right now because the conversion to C is
only planned to happen AFTER shiftability and filetable extract/rebuild is
finished.

The root is meant to hold code that appears in the main segment.

- src/cutscene/
Code from segment 1.

- src/game/
Code from segment 3.

- src/menu1/
Code from segment 0.

- src/menu2/
Code from segment 2.

--------------------------------------------------------------------------------
tools/
This directory houses any tools used by the project.

Yes, aki_lzss could have been dealt with as a sub-module, but I'm lazy.
